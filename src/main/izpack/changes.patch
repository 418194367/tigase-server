diff --git a/.gitignore b/.gitignore
index 330ec13..dcc7292 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,37 @@
+
+# /
 /_build
 /_dist
 /eclipse-bin
+
+# /bin/
+/bin/panels
+/bin/customActions
+
+# /doc/
+/doc/izpack
+
+# /lib/
+/lib/compiler.jar
+/lib/installer.jar
+/lib/izevent.jar
+/lib/standalone-compiler.jar
+/lib/uninstaller-ext.jar
+/lib/uninstaller.jar
+
+# /src/dist-files/
+/src/dist-files/.xvpics
+
+# /src/native/COIOSHelper/src/
+/src/native/COIOSHelper/src/Release
+
+# /src/native/ShellLink/
+/src/native/ShellLink/ShellLink.vcproj.BISSOLDOM.blf.user
+
+# /src/native/ShellLink/src/
+/src/native/ShellLink/src/Release
+
+# /utils/
+#
+#
+*.class
diff --git a/src/build.xml b/src/build.xml
index 60e52dc..b29e756 100644
--- a/src/build.xml
+++ b/src/build.xml
@@ -558,7 +558,6 @@
             <!-- sourcepath is cleared so there's no mistaking what goes into the Panel -->
             <javac srcdir="@{srcdir}"
                    destdir="${bin.dir}/panels/@{name}"
-                   classpath="${installer.jar}"
                    sourcepath=""
                    optimize="on"
                    deprecation="on"
@@ -567,6 +566,12 @@
                    target="${compat.target}"
                    debuglevel="${debuglevel}">
                 <panel-fileset/>
+				<classpath> 
+					<pathelement location="${installer.jar}"/> 
+					<pathelement location="${basedir}/tigaseLib/tigase-server.jar"/> 
+					<pathelement location="${basedir}/tigaseLib/tigase-utils.jar"/> 
+					<pathelement location="${basedir}/tigaseLib/tigase-xmltools.jar"/> 
+				</classpath> 
             </javac>
             <jar jarfile="${bin.dir}/panels/@{name}.jar" basedir="${bin.dir}/panels/@{name}"/>
         </sequential>
@@ -597,7 +602,9 @@
         </build-panel>
         <build-panel name="CheckedHelloPanel">
             <include name="com/izforge/izpack/panels/CheckedHelloPanel.java"/>
+	        <include name="com/izforge/izpack/panels/CheckedHelloPanelConsoleHelper.java"/>
             <include name="com/izforge/izpack/panels/HelloPanel.java"/>
+	        <include name="com/izforge/izpack/panels/HelloPanelConsoleHelper.java"/>
             <include name="com/izforge/izpack/util/os/*RegistryHandler.java"/>
             <include name="com/izforge/izpack/util/OSClassHelper.java"/>
             <include name="com/izforge/izpack/util/os/WrappedNativeLibException.java"/>
@@ -629,6 +636,7 @@
             <include name="com/izforge/izpack/panels/PacksModel.java"/>
             <include name="com/izforge/izpack/panels/PacksPanel.java"/>
             <include name="com/izforge/izpack/panels/PacksPanelAutomationHelper.java"/>
+	        <include name="com/izforge/izpack/panels/PacksPanelConsoleHelper.java"/>
             <include name="com/izforge/izpack/panels/PacksPanelBase.java"/>
             <include name="com/izforge/izpack/panels/PacksPanelInterface.java"/>
         </build-panel>
@@ -646,9 +654,11 @@
         </build-panel>
         <build-panel name="HTMLInfoPanel">
             <include name="com/izforge/izpack/panels/HTMLInfoPanel.java"/>
+            <include name="com/izforge/izpack/panels/HTMLInfoPanelConsoleHelper.java"/>
         </build-panel>
         <build-panel name="TargetPanel">
             <include name="com/izforge/izpack/panels/PathInputPanel.java"/>
+            <include name="com/izforge/izpack/panels/PathInputPanelConsoleHelper.java"/>
             <include name="com/izforge/izpack/panels/PathSelectionPanel.java"/>
             <include name="com/izforge/izpack/panels/TargetPanel.java"/>
             <include name="com/izforge/izpack/panels/TargetPanelAutomationHelper.java"/>
@@ -665,6 +675,7 @@
             <include name="com/izforge/izpack/panels/JDKPathPanelConsoleHelper.java"/>
             <include name="com/izforge/izpack/panels/JDKPathPanelAutomationHelper.java"/>
             <include name="com/izforge/izpack/panels/PathInputPanel.java"/>
+            <include name="com/izforge/izpack/panels/PathInputPanelConsoleHelper.java"/>
             <include name="com/izforge/izpack/panels/PathSelectionPanel.java"/>
             <include name="com/izforge/izpack/util/os/*RegistryHandler.java"/>
             <include name="com/izforge/izpack/util/OSClassHelper.java"/>
@@ -674,6 +685,22 @@
             <include name="com/coi/tools/os/izpack/Registry.java"/>
             <include name="com/coi/tools/os/izpack/COIOSHelper.java"/>
         </build-panel>
+	 <build-panel name="TigaseJDKPathPanel">
+            <include name="com/izforge/izpack/panels/TigaseJDKPathPanel.java"/>
+	    <include name="com/izforge/izpack/panels/TigaseJDKPathPanelConsoleHelper.java"/>
+	    <include name="com/izforge/izpack/panels/JDKPathPanelConsoleHelper.java"/>
+            <include name="com/izforge/izpack/panels/PathInputPanel.java"/>
+	    <include name="com/izforge/izpack/panels/PathInputPanelConsoleHelper.java"/>
+            <include name="com/izforge/izpack/panels/PathSelectionPanel.java"/>
+            <include name="com/izforge/izpack/panels/TigaseInstallerCommon.java"/>		
+            <include name="com/izforge/izpack/util/os/*RegistryHandler.java"/>
+            <include name="com/izforge/izpack/util/OSClassHelper.java"/>
+            <include name="com/izforge/izpack/util/os/WrappedNativeLibException.java"/>
+            <include name="com/coi/tools/os/win/*.java"/>
+            <include name="com/coi/tools/os/win/resources/NativeLibErr*.java"/>
+            <include name="com/coi/tools/os/izpack/Registry.java"/>
+            <include name="com/coi/tools/os/izpack/COIOSHelper.java"/>
+        </build-panel>
         <build-panel name="XInfoPanel">
             <include name="com/izforge/izpack/panels/XInfoPanel.java"/>
         </build-panel>
@@ -769,6 +796,40 @@
             <include name="com/izforge/izpack/panels/HTMLHelloPanel.java"/>
             <include name="com/izforge/izpack/panels/HTMLInfoPanel.java"/>
         </build-panel>
+
+        <!-- tigase panels -->
+        <build-panel name="DerbyPathPanel">
+            <include name="com/izforge/izpack/panels/DerbyPathPanel.java"/>
+             <include name="com/izforge/izpack/panels/TigaseInstallerCommon.java"/>		
+	     <include name="com/izforge/izpack/panels/DerbyPathPanelConsoleHelper.java"/>
+           <include name="com/izforge/izpack/panels/TigaseConfigConst.java"/>
+             <include name="com/izforge/izpack/panels/TargetPanel.java"/>
+           <include name="com/izforge/izpack/panels/TargetPanelAutomationHelper.java"/>
+            <include name="com/izforge/izpack/panels/PathInputPanel.java"/>
+        </build-panel>
+
+        <build-panel name="TigaseConfigLoadPanel">
+            <include name="com/izforge/izpack/panels/TigaseConfigLoadPanel.java"/>
+              <include name="com/izforge/izpack/panels/TigaseInstallerCommon.java"/>		
+		<include name="com/izforge/izpack/panels/TigaseConfigLoadPanelConsoleHelper.java"/>
+          <include name="com/izforge/izpack/panels/TigaseConfigConst.java"/>
+        </build-panel>
+
+        <build-panel name="TigaseConfigSavePanel">
+            <include name="com/izforge/izpack/panels/TigaseConfigSavePanel.java"/>
+               <include name="com/izforge/izpack/panels/TigaseInstallerCommon.java"/>		
+		<include name="com/izforge/izpack/panels/TigaseConfigSavePanelConsoleHelper.java"/>
+         <include name="com/izforge/izpack/panels/TigaseConfigConst.java"/>
+        </build-panel>
+
+        <build-panel name="TigaseDBCheckPanel">
+            <include name="com/izforge/izpack/panels/TigaseDBCheckPanel.java"/>
+                <include name="com/izforge/izpack/panels/TigaseInstallerCommon.java"/>		
+		<include name="com/izforge/izpack/panels/TigaseDBCheckPanelConsoleHelper.java"/>
+        <include name="com/izforge/izpack/panels/TigaseConfigConst.java"/>
+		<include name="com/izforge/izpack/panels/TigaseInstallerDBHelper.java"/>
+        </build-panel>
+
     </target>
 
     <!--
@@ -805,6 +866,7 @@
             <fileset dir="${build.dir}">
                 <include name="com/izforge/izpack/event/*.class"/>
                 <include name="com/izforge/izpack/util/IoHelper.class"/>
+<!--                <exclude name="com/izforge/izpack/event/*Compiler*.class"/> -->
             </fileset>
         </jar>
     </target>
diff --git a/src/lib/com/izforge/izpack/installer/PanelConsoleHelper.java b/src/lib/com/izforge/izpack/installer/PanelConsoleHelper.java
index b6d9daa..053c035 100644
--- a/src/lib/com/izforge/izpack/installer/PanelConsoleHelper.java
+++ b/src/lib/com/izforge/izpack/installer/PanelConsoleHelper.java
@@ -24,6 +24,9 @@ import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
 
+import com.izforge.izpack.Panel;
+import com.izforge.izpack.util.VariableSubstitutor;
+
 /**
  * Abstract class implementing basic functions needed by all panel console helpers.
  * 
@@ -32,9 +35,9 @@ import java.io.InputStreamReader;
 abstract public class PanelConsoleHelper 
 {
 
+	public enum PanelContinuation { CONTINUE, QUIT, REDISPLAY };
 
-
-    public int askEndOfConsolePanel()
+    private PanelContinuation askEndOfConsolePanel()
     {
         try
         {
@@ -45,13 +48,15 @@ abstract public class PanelConsoleHelper
                 String strIn = br.readLine();
                 if (strIn.equals("1"))
                 {
-                    return 1;
+                    return PanelContinuation.CONTINUE;
                 }
                 else if (strIn.equals("2"))
                 {
-                    return 2;
+                    return PanelContinuation.QUIT;
+                }
+                else if (strIn.equals("3")) { 
+                	return PanelContinuation.REDISPLAY; 
                 }
-                else if (strIn.equals("3")) { return 3; }
             }
 
         }
@@ -59,7 +64,94 @@ abstract public class PanelConsoleHelper
         {
             e.printStackTrace();
         }
-        return 2;
+        return PanelContinuation.QUIT;
+    }
+    
+    protected boolean continueQuitOrReboot(
+    		AutomatedInstallData idata, PanelConsole panel
+    		) {
+    	PanelContinuation userChoice = askEndOfConsolePanel();
+        if (userChoice == PanelContinuation.CONTINUE)
+        {
+            return true;
+        }
+        else if (userChoice == PanelContinuation.QUIT)
+        {
+            return false;
+        }
+        else
+        {
+            return panel.runConsole(idata);
+        }
+    }
+    
+
+    
+    private String extractPanelNameFromConsoleHelperClassName(String className) {
+        final String consoleHelperSuffix = "ConsoleHelper";
+        final int suffixIndex = className.indexOf(consoleHelperSuffix);
+        if (suffixIndex == -1) {
+        	throw new IllegalStateException("Trying to get i18n info from a " +
+        			"class which is not a ConsoleHelper, not allowed");
+        }
+    	return className.substring(0, suffixIndex);
+    }
+
+    // this method gets i18n string for the panel related to the caller 
+    // console helper object, to be used only from classes with name ending with 
+    // ConsoleHelper suffix
+    protected String getI18nStringForClass(String subkey, String alternateClass, AutomatedInstallData idata)
+    {
+        final String thisClassName = getClass().getName();
+        final String panelClassName = extractPanelNameFromConsoleHelperClassName(thisClassName);
+        
+    	return (getI18nStringForClass(panelClassName, subkey, alternateClass, null, idata));
+    }
+
+    private String getI18nStringForClass(
+    		String curClassName, 
+    		String subkey, 
+    		String alternateClass,
+    		Panel metadata,
+    		AutomatedInstallData idata)
+    {
+
+        int nameStart = curClassName.lastIndexOf('.') + 1;
+        curClassName = curClassName.substring(nameStart, curClassName.length());
+        StringBuffer buf = new StringBuffer();
+        buf.append(curClassName).append(".").append(subkey);
+        String fullkey = buf.toString();
+        String panelid = null;
+        if (metadata != null)
+        {
+            panelid = metadata.getPanelid();
+        }
+        String retval = null;
+        if (panelid != null)
+        {
+            buf.append(".");
+            buf.append(panelid);
+            retval = idata.langpack.getString(buf.toString());
+        }
+        if (retval == null || retval.startsWith(fullkey))
+        {
+            retval = idata.langpack.getString(fullkey);
+        }
+        if (retval == null || retval.startsWith(fullkey))
+        {
+            if (alternateClass == null) { return (null); }
+            buf.delete(0, buf.length());
+            buf.append(alternateClass).append(".").append(subkey);
+            retval = idata.langpack.getString(buf.toString());
+        }
+        if (retval != null && retval.indexOf('$') > -1)
+        {
+            VariableSubstitutor substitutor = new VariableSubstitutor(idata.getVariables());
+            retval = substitutor.substitute(retval, null);
+        }
+        return (retval);
     }
 
+    
+    
 }
diff --git a/src/lib/com/izforge/izpack/panels/CheckedHelloPanelConsoleHelper.java b/src/lib/com/izforge/izpack/panels/CheckedHelloPanelConsoleHelper.java
new file mode 100644
index 0000000..d5feff3
--- /dev/null
+++ b/src/lib/com/izforge/izpack/panels/CheckedHelloPanelConsoleHelper.java
@@ -0,0 +1,4 @@
+package com.izforge.izpack.panels;
+
+public class CheckedHelloPanelConsoleHelper 
+extends HelloPanelConsoleHelper {}

diff --git a/src/lib/com/izforge/izpack/panels/HTMLInfoPanel.java b/src/lib/com/izforge/izpack/panels/HTMLInfoPanel.java
index 8a14d89..a47d3ff 100644
--- a/src/lib/com/izforge/izpack/panels/HTMLInfoPanel.java
+++ b/src/lib/com/izforge/izpack/panels/HTMLInfoPanel.java
@@ -46,6 +46,8 @@ public class HTMLInfoPanel extends IzPanel
 
     private static final long serialVersionUID = 3257008769514025270L;
 
+    static final String HTMLINFO_PANEL_NAME = "HTMLInfoPanel";
+
     /** Resource prefix for panel. */
     protected String panelResourcePrefixStr;
 
@@ -65,7 +67,7 @@ public class HTMLInfoPanel extends IzPanel
      */
     public HTMLInfoPanel(InstallerFrame parent, InstallData idata)
     {
-        this(parent,idata,"HTMLInfoPanel",true);
+        this(parent,idata,HTMLINFO_PANEL_NAME,true);
     }
 
     /**
diff --git a/src/lib/com/izforge/izpack/panels/HelloPanelConsoleHelper.java b/src/lib/com/izforge/izpack/panels/HelloPanelConsoleHelper.java
index bfb075a..f42d5f0 100644
--- a/src/lib/com/izforge/izpack/panels/HelloPanelConsoleHelper.java
+++ b/src/lib/com/izforge/izpack/panels/HelloPanelConsoleHelper.java
@@ -26,6 +26,7 @@ import java.util.Properties;
 
 import com.izforge.izpack.Info;
 import com.izforge.izpack.installer.AutomatedInstallData;
+import com.izforge.izpack.installer.ConsoleInstallHelper;
 import com.izforge.izpack.installer.PanelConsole;
 import com.izforge.izpack.installer.PanelConsoleHelper;
 
@@ -36,6 +37,8 @@ import com.izforge.izpack.installer.PanelConsoleHelper;
  */
 public class HelloPanelConsoleHelper extends PanelConsoleHelper implements PanelConsole
 {
+	
+	private static ConsoleInstallHelper helper = ConsoleInstallHelper.getInstance();
 
     public boolean runConsoleFromPropertiesFile(AutomatedInstallData installData, Properties p)
     {
@@ -53,6 +56,7 @@ public class HelloPanelConsoleHelper extends PanelConsoleHelper implements Panel
         String str;
         str = idata.langpack.getString("HelloPanel.welcome1") + idata.info.getAppName() + " "
                 + idata.info.getAppVersion() + idata.langpack.getString("HelloPanel.welcome2");
+        str = helper.variables.expand(str, idata);
         System.out.println(str);
         ArrayList<Info.Author> authors = idata.info.getAuthors();
         int size = authors.size();
@@ -75,18 +79,7 @@ public class HelloPanelConsoleHelper extends PanelConsoleHelper implements Panel
             str = idata.langpack.getString("HelloPanel.url") + idata.info.getAppURL();
             System.out.println(str);
         }
-        int i = askEndOfConsolePanel();
-        if (i == 1)
-        {
-            return true;
-        }
-        else if (i == 2)
-        {
-            return false;
-        }
-        else
-        {
-            return runConsole(idata);
-        }
+        
+        return continueQuitOrReboot(idata, this);
     }
 }
diff --git a/src/lib/com/izforge/izpack/panels/TargetPanel.java b/src/lib/com/izforge/izpack/panels/TargetPanel.java
index 7cf4ce2..03004f0 100644
--- a/src/lib/com/izforge/izpack/panels/TargetPanel.java
+++ b/src/lib/com/izforge/izpack/panels/TargetPanel.java
@@ -21,6 +21,8 @@
 
 package com.izforge.izpack.panels;
 
+import java.io.File;
+
 import com.izforge.izpack.installer.InstallData;
 import com.izforge.izpack.installer.InstallerFrame;
 import com.izforge.izpack.adaptator.IXMLElement;
@@ -84,7 +86,22 @@ public class TargetPanel extends PathInputPanel
      */
     public boolean isValidated()
     {
-        // Standard behavior of PathInputPanel.
+    	{
+    		// TODO: to be removed later
+    		// currently it is done to avoid installation 
+    		// over old Tigase directory, as there is a bug in the unpacker
+    		// http://jira.codehaus.org/browse/IZPACK-395
+    		File testDir = new File(pathSelectionPanel.getPath());
+    		File serverFile = new File(testDir, "jars/tigase-server.jar");
+    		if (serverFile.exists()) {
+    			String msg = "Installation over existing Tigase directory \n" +
+    					"is not supported right now.";
+    			emitError("Error", msg);
+    			return false;
+    		}
+    	}
+    	
+    	// Standard behavior of PathInputPanel.
         if (!super.isValidated())
         {
             return (false);
diff --git a/src/lib/com/izforge/izpack/panels/TargetPanelConsoleHelper.java b/src/lib/com/izforge/izpack/panels/TargetPanelConsoleHelper.java
index 964eec9..a3f0d85 100644
--- a/src/lib/com/izforge/izpack/panels/TargetPanelConsoleHelper.java
+++ b/src/lib/com/izforge/izpack/panels/TargetPanelConsoleHelper.java
@@ -95,19 +95,7 @@ public class TargetPanelConsoleHelper extends PanelConsoleHelper implements Pane
         strTargetPath = vs.substitute(strTargetPath, null);
 
         idata.setInstallPath(strTargetPath);
-        int i = askEndOfConsolePanel();
-        if (i == 1)
-        {
-            return true;
-        }
-        else if (i == 2)
-        {
-            return false;
-        }
-        else
-        {
-            return runConsole(idata);
-        }
 
+        return continueQuitOrReboot(idata, this);
     }
 }

diff --git a/src/lib/com/izforge/izpack/panels/UserInputPanel.java b/src/lib/com/izforge/izpack/panels/UserInputPanel.java
index fbda7e9..5e46d4e 100644
--- a/src/lib/com/izforge/izpack/panels/UserInputPanel.java
+++ b/src/lib/com/izforge/izpack/panels/UserInputPanel.java
@@ -2497,6 +2497,8 @@ public class UserInputPanel extends IzPanel implements ActionListener, ItemListe
                 if (value.equals(trueValue))
                 {
                     set = TRUE;
+                } else {
+                	set = FALSE;
                 }
             }
         }
diff --git a/src/lib/com/izforge/izpack/panels/UserInputPanelConsoleHelper.java b/src/lib/com/izforge/izpack/panels/UserInputPanelConsoleHelper.java
index ca9a659..1245897 100644
--- a/src/lib/com/izforge/izpack/panels/UserInputPanelConsoleHelper.java
+++ b/src/lib/com/izforge/izpack/panels/UserInputPanelConsoleHelper.java
@@ -29,17 +29,16 @@ import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Properties;
-import java.util.StringTokenizer;
 import java.util.Vector;
 
-import com.izforge.izpack.Pack;
 import com.izforge.izpack.Panel;
 import com.izforge.izpack.adaptator.IXMLElement;
 import com.izforge.izpack.installer.AutomatedInstallData;
+import com.izforge.izpack.installer.ConsoleHelper;
+import com.izforge.izpack.installer.ConsoleInstallHelper;
 import com.izforge.izpack.installer.PanelConsole;
 import com.izforge.izpack.installer.PanelConsoleHelper;
 import com.izforge.izpack.util.Debug;
-import com.izforge.izpack.util.OsVersion;
 import com.izforge.izpack.util.SpecHelper;
 import com.izforge.izpack.util.VariableSubstitutor;
 
@@ -72,10 +71,10 @@ public class UserInputPanelConsoleHelper extends PanelConsoleHelper implements P
     private static final String SET = "set";
 
     private static final String TEXT = "txt";
+    
+    private static final String ID = "id";
 
     private static final String SPEC = "spec";
-    
-    private static final String PWD = "pwd";
 
     private static final String TYPE_ATTRIBUTE = "type";
 
@@ -84,77 +83,48 @@ public class UserInputPanelConsoleHelper extends PanelConsoleHelper implements P
     private static final String COMBO_FIELD = "combo";
 
     private static final String STATIC_TEXT = "staticText";
+    
+    private static final String TITLE_TEXT = "title";
 
-    private static final String CHOICE = "choice";
+    private static final String SPACE_TEXT = "space";
+    
+    private static final String DIVIDER_TEXT = "divider";
     
-    private static final String FILE = "file";
+    private static final String CHECK_FIELD = "check";
     
-    private static final String PASSWORD = "password";
+    private static final String CHOICE = "choice";
 
     private static final String VALUE = "value";
 
     private static final String RADIO_FIELD = "radio";
-
-    private static final String TITLE_FIELD = "title";
-
-    private static final String CHECK_FIELD = "check";
-
-    private static final String RULE_FIELD = "rule";
     
-    private static final String SPACE = "space";
-    
-    private static final String DIVIDER = "divider";
-
-    static final String DISPLAY_FORMAT = "displayFormat";
-
-    static final String PLAIN_STRING = "plainString";
-
-    static final String SPECIAL_SEPARATOR = "specialSeparator";
-
-    static final String LAYOUT = "layout";
-
-    static final String RESULT_FORMAT = "resultFormat";
+    private static final String PASSWORD_FIELD = "password";
 
     private static final String DESCRIPTION = "description";
 
-    private static final String TRUE = "true";   
-        
-    private static final String NAME = "name";
-
-    private static final String FAMILY = "family";
-
-    private static final String OS = "os";
-
-    private static final String SELECTEDPACKS = "createForPack";
-
-   
-    private static Input SPACE_INTPUT_FIELD = new Input(SPACE, null, null, SPACE, "\r", 0);
-    private static Input DIVIDER_INPUT_FIELD = new Input(DIVIDER, null, null, DIVIDER, "------------------------------------------", 0);
+    private static final String TRUE = "true";
     
+    private static final String FALSE = "false";
+
     public List<Input> listInputs;
-          
+
     public UserInputPanelConsoleHelper()
     {
         instanceNumber = instanceCount++;
         listInputs = new ArrayList<Input>();
-        
     }
 
     public boolean runConsoleFromPropertiesFile(AutomatedInstallData installData, Properties p)
     {
-    	
         collectInputs(installData);
         Iterator<Input> inputIterator = listInputs.iterator();
         while (inputIterator.hasNext())
         {
-            String strVariableName = ((Input) inputIterator.next()).strVariableName;
-            if (strVariableName != null)
+            String strVariableName = ((Input) inputIterator.next()).getVariableName();
+            String strVariableValue = p.getProperty(strVariableName);
+            if (strVariableValue != null)
             {
-                String strVariableValue = p.getProperty(strVariableName);
-                if (strVariableValue != null)
-                {
-                    installData.setVariable(strVariableName, strVariableValue);
-                }
+                installData.setVariable(strVariableName, strVariableValue);
             }
         }
         return true;
@@ -163,80 +133,35 @@ public class UserInputPanelConsoleHelper extends PanelConsoleHelper implements P
     public boolean runGeneratePropertiesFile(AutomatedInstallData installData,
             PrintWriter printWriter)
     {
-
         collectInputs(installData);
         Iterator<Input> inputIterator = listInputs.iterator();
         while (inputIterator.hasNext())
         {
-            Input input = (Input) inputIterator.next();
-            if (input.strVariableName != null)
-            {
-                printWriter.println(input.strVariableName + "=");
-            }
+            printWriter.println(((Input) inputIterator.next()).getVariableName() + "=");
         }
         return true;
     }
 
     public boolean runConsole(AutomatedInstallData idata)
     {
-
-        boolean processpanel = collectInputs(idata);
-        if (!processpanel) {
-            return true;
-        }
+        collectInputs(idata);
         boolean status = true;
         Iterator<Input> inputsIterator = listInputs.iterator();
         while (inputsIterator.hasNext())
         {
             Input input = inputsIterator.next();
- 
-            if (TEXT_FIELD.equals(input.strFieldType) 
-        		|| FILE.equals(input.strFieldType) 
-        		|| RULE_FIELD.equals(input.strFieldType))
-            {
-                status = status && processTextField(input, idata);
-            }
-            else if (COMBO_FIELD.equals(input.strFieldType)
-                    || RADIO_FIELD.equals(input.strFieldType))
-            {
-                status = status && processComboRadioField(input, idata);
-            }
-            else if (CHECK_FIELD.equals(input.strFieldType))
-            {
-                status = status && processCheckField(input, idata);
-            } 
-           else if(STATIC_TEXT.equals(input.strFieldType) 
-        		   || TITLE_FIELD.equals(input.strFieldType)
-        		   || DIVIDER.equals(input.strFieldType)
-        		   || SPACE.equals(input.strFieldType) )
-           {
-        	   status = status && processSimpleField(input, idata);
-           } 
-           else if (PASSWORD.equals(input.strFieldType) ) {
-               status = status && processPasswordField(input, idata);
-           }
-
-        }
-
-        int i = askEndOfConsolePanel();
-        if (i == 1)
-        {
-            return true;
-        }
-        else if (i == 2)
-        {
-            return false;
-        }
-        else
-        {
-            return runConsole(idata);
+            try {
+				status = status && input.process(idata);
+			} catch (IOException e) {
+				throw new RuntimeException("I/O error", e);
+			} 
         }
 
+        return continueQuitOrReboot(idata, this);
     }
 
     public boolean collectInputs(AutomatedInstallData idata)
     {
-    	
         listInputs.clear();
         IXMLElement data;
         IXMLElement spec = null;
@@ -255,7 +180,6 @@ public class UserInputPanelConsoleHelper extends PanelConsoleHelper implements P
         {
 
             e1.printStackTrace();
-            return false;
         }
 
         specElements = specHelper.getSpec().getChildrenNamed(NODE_ID);
@@ -267,320 +191,41 @@ public class UserInputPanelConsoleHelper extends PanelConsoleHelper implements P
             if (((attribute != null) && instance.equals(attribute))
                     || ((dataID != null) && (panelid != null) && (panelid.equals(dataID))))
             {
-
-                Vector<IXMLElement> forPacks = data.getChildrenNamed(SELECTEDPACKS);
-                Vector<IXMLElement> forOs = data.getChildrenNamed(OS);
-
-                if (itemRequiredFor(forPacks, idata) && itemRequiredForOs(forOs)) {
-                    spec = data;
-                    break;
-                }
+                spec = data;
             }
         }
-        
-        if (spec == null) {
-            return false;
-        }
         Vector<IXMLElement> fields = spec.getChildrenNamed(FIELD_NODE_ID);
         for (int i = 0; i < fields.size(); i++)
         {
             IXMLElement field = fields.elementAt(i);
-
-            Vector<IXMLElement> forPacks = field.getChildrenNamed(SELECTEDPACKS);
-            Vector<IXMLElement> forOs = field.getChildrenNamed(OS);
-
-            if (itemRequiredFor(forPacks, idata) && itemRequiredForOs(forOs)) {
-        
-                String conditionid = field.getAttribute(ATTRIBUTE_CONDITIONID_NAME);
-                if (conditionid != null)
+            String conditionid = field.getAttribute(ATTRIBUTE_CONDITIONID_NAME);
+            if (conditionid != null)
+            {
+                // check if condition is fulfilled
+                if (!idata.getRules().isConditionTrue(conditionid, idata.getVariables()))
                 {
-                    // check if condition is fulfilled
-                    if (!idata.getRules().isConditionTrue(conditionid, idata.getVariables()))
-                    {
-                        continue;
-                    }
-                }
-                Input in = getInputFromField(field, idata);
-                if (in != null) {
-                	listInputs.add(in);
+                    continue;
                 }
             }
-         }
-        return true;
-    }
-    
-    boolean processSimpleField(Input input, AutomatedInstallData idata)
-    {
-        VariableSubstitutor vs = new VariableSubstitutor(idata.getVariables());
-        System.out.println(vs.substitute(input.strText, null));
-        return true;
-    }
-    
-    boolean processPasswordField(Input input, AutomatedInstallData idata) {
-
-        Password pwd = (Password) input;
-        
-        boolean rtn = false;
-        for (int i=0; i < pwd.input.length; i++) {
-            rtn = processTextField(pwd.input[i], idata);
-            if (!rtn) return rtn;
+            listInputs.add(getInputFromField(field));
         }
-    
-        return rtn;
         
-    }
-
-    boolean processTextField(Input input, AutomatedInstallData idata)
-    {
-        String variable = input.strVariableName;
-        String set;
-        String fieldText;
-        if ((variable == null) || (variable.length() == 0)) { return false; }
-
-        if (input.listChoices.size() == 0)
-        {
-            Debug.trace("Error: no spec element defined in file field");
-            return false;
-        }
-       
-        set = idata.getVariable(variable);
-        if (set == null)
-        {
-            set = input.strDefaultValue;
-            if (set == null)
-            {
-                set = "";
-            } 
-        }
-
-        if (set != null && !"".equals(set))
-        {
-            VariableSubstitutor vs = new VariableSubstitutor(idata.getVariables());
-            set = vs.substitute(set, null);
-        }
-
-        fieldText = input.listChoices.get(0).strText;
-        System.out.println(fieldText + " [" + set + "] ");
-        try
-        {
-            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
-            String strIn = br.readLine();
-            if (!strIn.trim().equals(""))
-            {
-                idata.setVariable(variable, strIn);
-            }
-            else
-            {
-                idata.setVariable(variable, set);
-            }
-        }
-        catch (IOException e)
-        {
-            e.printStackTrace();
-        }
         return true;
-
     }
 
-    boolean processComboRadioField(Input input, AutomatedInstallData idata)
-    {// TODO protection if selection not valid and no set value
-        String variable = input.strVariableName;
-        if ((variable == null) || (variable.length() == 0)) { return false; }
-        String currentvariablevalue = idata.getVariable(variable);
-		  //If we dont do this, choice with index=0 will always be displayed, no matter what is selected
-		  input.iSelectedChoice = -1;
-        boolean userinput = false;
-        
-        // display the description for this combo or radio field
-        if (input.strText != null) {
-            System.out.println(input.strText);
-        }
-        
-        List<Choice> lisChoices = input.listChoices;
-        if (lisChoices.size() == 0)
-        {
-            Debug.trace("Error: no spec element defined in file field");
-            return false;
-        }
-        if (currentvariablevalue != null)
-        {
-            userinput = true;
-        }
-        for (int i = 0; i < lisChoices.size(); i++)
-        {
-            Choice choice = lisChoices.get(i);
-            String value = choice.strValue;
-            // if the choice value is provided via a property to the process, then
-            // set it as the selected choice, rather than defaulting to what the
-            // spec defines.
-            if (userinput)
-            {
-                if ((value != null) && (value.length() > 0) && (currentvariablevalue.equals(value)))
-                {
-                    input.iSelectedChoice = i;
-                }
-            }
-            else
-            {
-                String set = choice.strSet;
-                if (set != null)
-                {
-                    if (set != null && !"".equals(set))
-                    {
-                        VariableSubstitutor vs = new VariableSubstitutor(idata.getVariables());
-                        set = vs.substitute(set, null);
-                    }
-                    if (set.equals(TRUE))
-                    {
-                        input.iSelectedChoice = i;
-                    }
-                }
-            }
-            System.out.println(i + "  [" + (input.iSelectedChoice == i ? "x" : " ") + "] "
-                    + (choice.strText != null ? choice.strText : ""));
-        }
-
-        try
-        {
-            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
-            boolean bKeepAsking = true;
-
-            while (bKeepAsking)
-            {
-                System.out.println("input selection:");
-                String strIn = br.readLine();
-                // take default value if default value exists and no user input
-                if (strIn.trim().equals("") && input.iSelectedChoice != -1)
-                {
-                    bKeepAsking = false;
-                }
-                int j = -1;
-                try
-                {
-                    j = Integer.valueOf(strIn).intValue();
-                }
-                catch (Exception ex)
-                {}
-                // take user input if user input is valid
-                if (j >= 0 && j < lisChoices.size())
-                {
-                    input.iSelectedChoice = j;
-                    bKeepAsking = false;
-                }
-            }
-        }
-        catch (IOException e)
-        {
-            e.printStackTrace();
-        }
-        idata.setVariable(variable, input.listChoices.get(input.iSelectedChoice).strValue);
-        return true;
-
-    }
 
-    boolean processCheckField(Input input, AutomatedInstallData idata)
-    {
-        String variable = input.strVariableName;
-        if ((variable == null) || (variable.length() == 0)) { return false; }
-        String currentvariablevalue = idata.getVariable(variable);
-        if (currentvariablevalue == null)
-        {
-            currentvariablevalue = "";
-        }
-        List<Choice> lisChoices = input.listChoices;
-        if (lisChoices.size() == 0)
-        {
-            Debug.trace("Error: no spec element defined in check field");
-            return false;
-        }
-        Choice choice = null;
-        for (int i = 0; i < lisChoices.size(); i++)
-        {
-            choice = lisChoices.get(i);
-            String value = choice.strValue;
-
-            if ((value != null) && (value.length() > 0) && (currentvariablevalue.equals(value)))
-            {
-                input.iSelectedChoice = i;
-            }
-            else
-            {
-                String set = input.strDefaultValue;
-                if (set != null)
-                {
-                    if (set != null && !"".equals(set))
-                    {
-                        VariableSubstitutor vs = new VariableSubstitutor(idata.getVariables());
-                        set = vs.substitute(set, null);
-                    }
-                    if (set.equals(TRUE))
-                    {
-                        input.iSelectedChoice = 1;
-                    }
-                }
-            }
-        }
-        System.out.println("  [" + (input.iSelectedChoice == 1 ? "x" : " ") + "] "
-                + (choice.strText != null ? choice.strText : ""));
-        try
-        {
-            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
-            boolean bKeepAsking = true;
-
-            while (bKeepAsking)
-            {
-                System.out.println("input 1 to select, 0 to deselect:");
-                String strIn = br.readLine();
-                // take default value if default value exists and no user input
-                if (strIn.trim().equals(""))
-                {
-                    bKeepAsking = false;
-                }
-                int j = -1;
-                try
-                {
-                    j = Integer.valueOf(strIn).intValue();
-                }
-                catch (Exception ex)
-                {}
-                // take user input if user input is valid
-                if ((j == 0) || j == 1)
-                {
-                    input.iSelectedChoice = j;
-                    bKeepAsking = false;
-                }
-            }
-        }
-        catch (IOException e)
-        {
-            e.printStackTrace();
-        }
-        idata.setVariable(variable, input.listChoices.get(input.iSelectedChoice).strValue);
-        return true;
-
-    }
-
-    public Input getInputFromField(IXMLElement field, AutomatedInstallData idata)
+    public Input getInputFromField(IXMLElement field)
     {
         String strVariableName = field.getAttribute(VARIABLE);
         String strFieldType = field.getAttribute(TYPE_ATTRIBUTE);
-        if (TITLE_FIELD.equals(strFieldType))
-        {
-            String strText = null;
-            strText = field.getAttribute(TEXT);
-            return new Input(strVariableName, null, null, TITLE_FIELD, strText, 0);
-        }
-        
         if (STATIC_TEXT.equals(strFieldType))
         {
             String strText = null;
             strText = field.getAttribute(TEXT);
-            return new Input(strVariableName, null, null, STATIC_TEXT, strText, 0);
+            return new StaticText(strVariableName, strText);
         }
-        
-        if (TEXT_FIELD.equals(strFieldType) || FILE.equals(strFieldType) )
+        if (TEXT_FIELD.equals(strFieldType))
         {
-            List<Choice> choicesList = new ArrayList<Choice>();
             String strFieldText = null;
             String strSet = null;
             String strText = null;
@@ -588,94 +233,41 @@ public class UserInputPanelConsoleHelper extends PanelConsoleHelper implements P
             IXMLElement description = field.getFirstChildNamed(DESCRIPTION);
             if (spec != null)
             {
-                strText = spec.getAttribute(TEXT);
-                strSet = spec.getAttribute(SET);
+                strText = field.getFirstChildNamed(SPEC).getAttribute(TEXT);
+                strSet = field.getFirstChildNamed(SPEC).getAttribute(SET);
             }
             if (description != null)
             {
                 strFieldText = description.getAttribute(TEXT);
             }
-            choicesList.add(new Choice(strText, null, strSet));
-            return new Input(strVariableName, strSet, choicesList, strFieldType, strFieldText, 0);
-
+            Choice choice = new Choice(strText, null, strSet);
+            return new Text(strVariableName, true, strSet, choice, strFieldText);
         }
-         
-        if (RULE_FIELD.equals(strFieldType))
-        {
-
-            List<Choice> choicesList = new ArrayList<Choice>();
-            String strFieldText = null;
-            String strSet = null;
-            String strText = null;
+        else if (PASSWORD_FIELD.equals(strFieldType)) {
             IXMLElement spec = field.getFirstChildNamed(SPEC);
-            IXMLElement description = field.getFirstChildNamed(DESCRIPTION);
+            String pwd1, pwd2;
             if (spec != null)
             {
-                strText = spec.getAttribute(TEXT);
-                strSet = spec.getAttribute(SET);
+            	List<IXMLElement> pwdElements = field.getChildrenNamed("pwd");
+            	if (pwdElements.size() != 2) {
+            		throw new RuntimeException("Currently only two pwd values" +
+            				" are supported in a password field");
+            	}
+            	pwd1 = pwdElements.get(0).getAttribute("txt");
+            	pwd2 = pwdElements.get(1).getAttribute("txt");
+            	if (pwd1 == null || pwd2 == null) {
+            		throw new RuntimeException("Pwd elements need to specify " +
+            				"a text attribute in a password field");
+            	}
+            } else {
+            	throw new RuntimeException("Password field needs specification");
             }
-            if (description != null)
-            {
-                strFieldText = description.getAttribute(TEXT);
-            }
-            if (strSet != null && spec.getAttribute(LAYOUT) != null)
-            {
-                StringTokenizer layoutTokenizer = new StringTokenizer(spec.getAttribute(LAYOUT));
-                List<String> listSet = Arrays.asList(new String[layoutTokenizer.countTokens()]);
-                StringTokenizer setTokenizer = new StringTokenizer(strSet);
-                String token;
-                while (setTokenizer.hasMoreTokens())
-                {
-                    token = setTokenizer.nextToken();
-                    if (token.indexOf(":") > -1)
-                    {
-                        listSet.set(new Integer(token.substring(0, token.indexOf(":"))).intValue(),
-                                token.substring(token.indexOf(":") + 1));
-                    }
-                }
-
-                int iCounter = 0;
-                StringBuffer sb = new StringBuffer();
-                String strRusultFormat = spec.getAttribute(RESULT_FORMAT);
-                String strSpecialSeparator = spec.getAttribute(SPECIAL_SEPARATOR);
-                while (layoutTokenizer.hasMoreTokens())
-                {
-                    token = layoutTokenizer.nextToken();
-                    if (token.matches(".*:.*:.*"))
-                    {
-                        sb.append(listSet.get(iCounter) != null ? listSet.get(iCounter) : "");
-                        iCounter++;
-                    }
-                    else
-                    {
-                        if (SPECIAL_SEPARATOR.equals(strRusultFormat))
-                        {
-                            sb.append(strSpecialSeparator);
-                        }
-                        else if (PLAIN_STRING.equals(strRusultFormat))
-                        {
-
-                        }
-                        else
-                        // if (DISPLAY_FORMAT.equals(strRusultFormat))
-                        {
-                            sb.append(token);
-                        }
-
-                    }
-                }
-                strSet = sb.toString();
-            }
-            choicesList.add(new Choice(strText, null, strSet));
-            return new Input(strVariableName, strSet, choicesList, TEXT_FIELD, strFieldText, 0);
-
+            return new Password(strVariableName, pwd1, pwd2);
         }
-
-        if (COMBO_FIELD.equals(strFieldType) || RADIO_FIELD.equals(strFieldType))
+        else if (COMBO_FIELD.equals(strFieldType) || RADIO_FIELD.equals(strFieldType))
         {
             List<Choice> choicesList = new ArrayList<Choice>();
             String strFieldText = null;
-            int selection = -1;
             IXMLElement spec = field.getFirstChildNamed(SPEC);
             IXMLElement description = field.getFirstChildNamed(DESCRIPTION);
             Vector<IXMLElement> choices = null;
@@ -689,310 +281,388 @@ public class UserInputPanelConsoleHelper extends PanelConsoleHelper implements P
             }
             for (int i = 0; i < choices.size(); i++)
             {
-
                 IXMLElement choice = choices.elementAt(i);
-                String processorClass = choice.getAttribute("processor");
-
-                if (processorClass != null && !"".equals(processorClass))
-                {
-                    String choiceValues = "";
-                    try
-                    {
-                        choiceValues = ((Processor) Class.forName(processorClass).newInstance())
-                                .process(null);
-                    }
-                    catch (Throwable t)
-                    {
-                        t.printStackTrace();
-                    }
-                    String set = choice.getAttribute(SET);
-                    if (set == null)
-                    {
-                        set = "";
-                    }
-                    if (set != null && !"".equals(set))
-                    {
-                        VariableSubstitutor vs = new VariableSubstitutor(idata.getVariables());
-                        set = vs.substitute(set, null);
-                    }
-
-                    StringTokenizer tokenizer = new StringTokenizer(choiceValues, ":");
-                    int counter = 0;
-                    while (tokenizer.hasMoreTokens())
-                    {
-                        String token = tokenizer.nextToken();
-                        String choiceSet = null;
-                        if (token.equals(set) 
-                                ) {
-                            choiceSet="true";
-                            selection=counter;
-                        }
-                        choicesList.add(new Choice(
-                                    token, 
-                                    token,
-                                    choiceSet));
-                        counter++;
-                        
-                    }
-                }
-                else
-                {
-                    String value = choice.getAttribute(VALUE);
-                    
-                    String set = choice.getAttribute(SET);
-                     if (set != null)
-                    {
-                        if (set != null && !"".equals(set))
-                        {
-                            VariableSubstitutor vs = new VariableSubstitutor(idata
-                                    .getVariables());
-                            set = vs.substitute(set, null);
-                        }
-                        if (set.equalsIgnoreCase(TRUE))
-                        {
-                            selection=i;
-                            
-                        }
-                    }
-
-                    
-                    choicesList.add(new Choice(
-                                choice.getAttribute(TEXT), 
-                                value,
-                                set));
-
-                    }
-                }
-
-            if (choicesList.size() == 1) {
-                selection = 0;
-            }
-          
-            return new Input(strVariableName, null, choicesList, strFieldType, strFieldText, selection);
-        }
-        
-        if (CHECK_FIELD.equals(strFieldType))
-        {
-            List<Choice> choicesList = new ArrayList<Choice>();
-            String strFieldText = null;
-            String strSet = null;
-            String strText = null;
-            int iSelectedChoice = 0;
-            IXMLElement spec = field.getFirstChildNamed(SPEC);
-            IXMLElement description = field.getFirstChildNamed(DESCRIPTION);
-            if (spec != null)
-            {
-                strText = spec.getAttribute(TEXT);
-                strSet = spec.getAttribute(SET);
-                choicesList.add(new Choice(strText, spec.getAttribute("false"), null));
-                choicesList.add(new Choice(strText, spec.getAttribute("true"), null));
-                if (strSet != null)
-                {
-                    if (strSet.equalsIgnoreCase(TRUE))
-                    {
-                        iSelectedChoice = 1;
-                    }
-                }
+                choicesList.add(new Choice(choice.getAttribute(TEXT), choice.getAttribute(VALUE),
+                        choice.getAttribute(SET)));
             }
-            else
+            return new Combo(strVariableName, choicesList, strFieldText);
+            
+//            return new Input(strVariableName, null, choicesList, COMBO_FIELD, strFieldText, -1);
+        } 
+        else if (CHECK_FIELD.equals(strFieldType))
+        {
+            Description description = null;
+            Spec spec = null;
+        	
+        	IXMLElement descriptionElem = field.getFirstChildNamed(DESCRIPTION);
+        	if (descriptionElem != null)
             {
-                System.out.println("No spec specified for input of type check");
+                description = new Description(descriptionElem);
             }
-
-            if (description != null)
-            {
-                strFieldText = description.getAttribute(TEXT);
+        	
+        	IXMLElement specElem = field.getFirstChildNamed(SPEC);
+            if (specElem != null) {
+            	spec = new Spec(specElem);
             }
-            return new Input(strVariableName, strSet, choicesList, CHECK_FIELD, strFieldText,
-                    iSelectedChoice);
+        	
+        	return new Check(strVariableName, spec, description);
         }
-
-
-        if (SPACE.equals(strFieldType) )
+        else if (TITLE_TEXT.equals(strFieldType))
         {
-            return SPACE_INTPUT_FIELD;
-
-        }
-        
-        if (DIVIDER.equals(strFieldType)) 
+            String strText = null;
+            strText = field.getAttribute(TEXT);
+            return new Title(strText);        	
+        } 
+        else if (SPACE_TEXT.equals(strFieldType)) 
         {
-            return DIVIDER_INPUT_FIELD;
+        	return new Space();
         }
+        else if (DIVIDER_TEXT.equals(strFieldType))
+        {
         
-        
-        if (PASSWORD.equals(strFieldType))
+        	return new Divider();
+        }
+        else
         {
-            List<Choice> choicesList = new ArrayList<Choice>();
-            String strFieldText = null;
-            String strSet = null;
-            String strText = null;
-            
-            IXMLElement spec = field.getFirstChildNamed(SPEC);
-            if (spec != null)
-            {
-                
-                Vector<IXMLElement> pwds = spec.getChildrenNamed(PWD);
-                if (pwds == null || pwds.size() == 0) {
-                    System.out.println("No pwd specified in the spec for type password");
-                    return null;                   
-                }
+        	System.out.println(strFieldType + " field collection not implemented");
 
-                Input[] inputs = new Input[pwds.size()];
-                for (int i = 0; i < pwds.size(); i++)
-                {
-                  
-                    IXMLElement pwde = pwds.elementAt(i);
-                    strText = pwde.getAttribute(TEXT);
-                    strSet = pwde.getAttribute(SET);
-                    choicesList.add(new Choice(strText, null, strSet));
-                    inputs[i] = new Input(strVariableName, strSet, choicesList, strFieldType, strFieldText, 0);
-                
-                }
-                 return new Password(strFieldType, inputs);                
-                
-             } 
-            
-            System.out.println("No spec specified for input of type password");
-            return null;
         }
-
-        
-        System.out.println(strFieldType + " field collection not implemented");
-
         return null;
     }
-    
-    /*--------------------------------------------------------------------------*/
-    /**
-     * Verifies if an item is required for any of the packs listed. An item is required for a pack
-     * in the list if that pack is actually selected for installation. <br>
-     * <br>
-     * <b>Note:</b><br>
-     * If the list of selected packs is empty then <code>true</code> is always returnd. The same is
-     * true if the <code>packs</code> list is empty.
-     *
-     * @param packs a <code>Vector</code> of <code>String</code>s. Each of the strings denotes a
-     * pack for which an item should be created if the pack is actually installed.
-     * @return <code>true</code> if the item is required for at least one pack in the list,
-     * otherwise returns <code>false</code>.
-     */
-    /*--------------------------------------------------------------------------*/
-    /*
-     * $ @design
-     *
-     * The information about the installed packs comes from InstallData.selectedPacks. This assumes
-     * that this panel is presented to the user AFTER the PacksPanel.
-     * --------------------------------------------------------------------------
-     */
-    private boolean itemRequiredFor(Vector<IXMLElement> packs, AutomatedInstallData idata)
-    {
 
-        String selected;
-        String required;
-
-        if (packs.size() == 0) { return (true); }
-
-        // ----------------------------------------------------
-        // We are getting to this point if any packs have been
-        // specified. This means that there is a possibility
-        // that some UI elements will not get added. This
-        // means that we can not allow to go back to the
-        // PacksPanel, because the process of building the
-        // UI is not reversable.
-        // ----------------------------------------------------
-        // packsDefined = true;
-
-        // ----------------------------------------------------
-        // analyze if the any of the packs for which the item
-        // is required have been selected for installation.
-        // ----------------------------------------------------
-        for (int i = 0; i < idata.selectedPacks.size(); i++)
-        {
-            selected = ((Pack) idata.selectedPacks.get(i)).name;
-
-            for (int k = 0; k < packs.size(); k++)
-            {
-                required = (packs.elementAt(k)).getAttribute(NAME, "");
-                if (selected.equals(required)) { return (true); }
-            }
-        }
-
-        return (false);
+    
+    abstract class Input {
+    	
+    	protected ConsoleInstallHelper helper 
+    		= ConsoleInstallHelper.getInstance();
+    	
+    	private final String variableName;
+
+    	public String getVariableName() {
+			return variableName;
+		}
+		
+		protected Input(String variableName) {
+    		this.variableName = variableName;
+    	}
+		
+    	abstract boolean process(AutomatedInstallData idata)
+    	throws IOException;
+    
+    	// string input, default is always valid
+    	protected boolean isValid(String value) 
+    	{
+    		return true;
+    	}
+    	
+    	String inputValidValue() throws IOException {
+    		boolean isValidValue = false;
+    		
+            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+    		while (false == isValidValue) {
+                String strIn = br.readLine();
+                if (isValid(strIn))
+                {
+                	return strIn;
+                } 
+                else 
+                {
+                	System.out.print("Invalid value. Try again: ");
+                }
+    		}
+    		
+    		// should be unreachable in practice
+    		return "";
+    	}
+    	
+    	
     }
     
-    /**
-     * Verifies if an item is required for the operating system the installer executed. The
-     * configuration for this feature is: <br/>
-     * &lt;os family="unix"/&gt; <br>
-     * <br>
-     * <b>Note:</b><br>
-     * If the list of the os is empty then <code>true</code> is always returnd.
-     *
-     * @param os The <code>Vector</code> of <code>String</code>s. containing the os names
-     * @return <code>true</code> if the item is required for the os, otherwise returns
-     * <code>false</code>.
-     */
-    public boolean itemRequiredForOs(Vector<IXMLElement> os)
-    {
-        if (os.size() == 0) { return true; }
-
-        for (int i = 0; i < os.size(); i++)
-        {
-            String family = (os.elementAt(i)).getAttribute(FAMILY);
-            boolean match = false;
-
-            if ("windows".equals(family))
+    public class Text extends Input {
+		private final String strDefaultValue;
+		protected final String text;
+		private final Choice choice;
+		private final boolean doesInput;
+
+		public Text(String variableName, boolean doesInput,
+				String defaultValue, Choice choice, String text) {
+			super(variableName);
+			this.doesInput = doesInput;
+			this.strDefaultValue = defaultValue;
+			this.choice = choice;
+			this.text = text;
+		}
+
+		boolean process(AutomatedInstallData idata) {
+            String variable = getVariableName();
+            String set;
+            String fieldText;
+            if (doesInput)
+            	if ((variable == null) || (variable.length() == 0)) 
+            	{ 
+            		return false; 
+            	}
+
+            set = strDefaultValue;
+            if (set == null)
             {
-                match = OsVersion.IS_WINDOWS;
+                if (variable != null) {
+                	set = idata.getVariable(variable);
+                }
+                if (set == null)
+                {
+                    set = "";
+                }
             }
-            else if ("mac".equals(family))
+            else
             {
-                match = OsVersion.IS_OSX;
+                if (set != null && !"".equals(set))
+                {
+                    VariableSubstitutor vs = new VariableSubstitutor(idata.getVariables());
+                    set = vs.substitute(set, null);
+                }
             }
-            else if ("unix".equals(family))
-            {
-                match = OsVersion.IS_UNIX;
+
+            fieldText = (choice == null) ? text  : choice.strText;
+            fieldText = helper.variables.expand(fieldText, idata);
+            System.out.print(fieldText);
+            if (doesInput) System.out.print(" [" + set + "] ");
+            System.out.println();
+            
+            if (doesInput) {
+	            try
+	            {
+	                BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+	                String strIn = br.readLine();
+	                if (!strIn.trim().equals(""))
+	                {
+	                    idata.setVariable(variable, strIn);
+	                }
+	                else
+	                {
+	                    idata.setVariable(variable, set);
+	                }
+	            }
+	            catch (IOException e)
+	            {
+	                e.printStackTrace();
+	            }
             }
-            if (match) { return true; }
-        }
-        return false;
-    }
+            return true;
 
+		}
+    }
     
+    class Password extends Input {
+
+		private final String pwd1;
+		private final String pwd2;
+
+		protected Password(String variableName, String pwd1, String pwd2) {
+			super(variableName);
+			this.pwd1 = pwd1;
+			this.pwd2 = pwd2;
+		}
+
+		boolean process(AutomatedInstallData idata) throws IOException {
+			
+			String input1 = null;
+			String input2 = null;
+			
+			while (true) {
+				input1 = helper.console.askForPassword(pwd1);
+				input2 = helper.console.askForPassword(pwd2);
+				
+				if (input1 != null && input1.equals(input2)) 
+				{
+					break; // we have two the same non-null passwords
+				} 
+				else 
+				{
+					helper.console.displayMessage("Please enter two " +
+							"non-empty passwords");
+				}
+			}
+			
+            idata.setVariable(getVariableName(), input1);
+			
+			return true;
+		}
+    }
+    
+    class StaticText extends Text {
+    	public StaticText(String strVariableName, String text) {
+    		super(strVariableName, false, null, null, text);
+		}
+    }
 
-    public static class Input
-    {
-        
-        public Input(String strFieldType) 
-        {
-                this.strFieldType = strFieldType;
-        }
-
-        public Input(String strVariableName, String strDefaultValue, List<Choice> listChoices,
-                String strFieldType, String strFieldText, int iSelectedChoice)
-        {
-            this.strVariableName = strVariableName;
-            this.strDefaultValue = strDefaultValue;
-            this.listChoices = listChoices;
-            this.strFieldType = strFieldType;
-            this.strText = strFieldText;
-            this.iSelectedChoice = iSelectedChoice;
-        }
-
-        String strVariableName;
-
-        String strDefaultValue;
-
-        List<Choice> listChoices;
-
-        String strFieldType;
-
-        String strText;
+    class Title extends Text {
+    	public Title(String text) {
+			super(null, false, null, null, text);
+		}
 
-        int iSelectedChoice = -1;
+		boolean process(AutomatedInstallData idata) {
+			String expandedTxt = helper.variables.expand(text, idata);
+			System.out.println("*** " + expandedTxt);
+			return true;
+		}
     }
-
-    public static class Choice
+    
+    class Space extends Text {
+    	public Space() {
+    		super(null, false, null, null, "");
+    	}
+    }
+    
+    class Divider extends Text {
+    	public Divider() {
+    		super(null, false, null, null, "-------------------");
+    	}
+    }
+    
+    class Combo extends Input{
+    	
+		private final List<Choice> listChoices;
+		private int iSelectedChoice = -1;
+
+		public Combo(String strVariableName, List<Choice> listChoices,
+				String strFieldText) {
+			super(strVariableName);
+			this.listChoices = listChoices;
+		}
+
+		boolean process(AutomatedInstallData idata) {
+			
+			String variable = getVariableName();
+	        if ((variable == null) || (variable.length() == 0)) { return false; }
+	        String currentvariablevalue = idata.getVariable(variable);
+	        boolean userinput = false;
+	        List<Choice> lisChoices = listChoices;
+	        if (lisChoices.size() == 0)
+	        {
+	            Debug.trace("Error: no spec element defined in file field");
+	            return false;
+	        }
+	        if (currentvariablevalue != null)
+	        {
+	            userinput = true;
+	        }
+	        for (int i = 0; i < lisChoices.size(); i++)
+	        {
+	            Choice choice = lisChoices.get(i);
+	            String value = choice.strValue;
+	            if (userinput)
+	            {
+	                if ((value != null) && (value.length() > 0) && (currentvariablevalue.equals(value)))
+	                {
+	                    iSelectedChoice = i;
+	                }
+	            }
+	            else
+	            {
+	                String set = choice.strSet;
+	                if (set != null)
+	                {
+	                    if (set != null && !"".equals(set))
+	                    {
+	                        VariableSubstitutor vs = new VariableSubstitutor(idata.getVariables());
+	                        set = vs.substitute(set, null);
+	                    }
+	                    if (set.equals(TRUE))
+	                    {
+	                        iSelectedChoice = i;
+	                    }
+	                }
+	            }
+	            System.out.println(i + "  [" + (iSelectedChoice == i ? "x" : " ") + "] "
+	                    + (choice.strText != null ? choice.strText : ""));
+	        }
+
+	        try
+	        {
+	            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
+	            boolean bKeepAsking = true;
+
+	            while (bKeepAsking)
+	            {
+	                System.out.println("input selection:");
+	                String strIn = br.readLine();
+	                // take default value if default value exists and no user input
+	                if (strIn.trim().equals("") && iSelectedChoice != -1)
+	                {
+	                    bKeepAsking = false;
+	                }
+	                int j = -1;
+	                try
+	                {
+	                    j = Integer.valueOf(strIn).intValue();
+	                }
+	                catch (Exception ex)
+	                {}
+	                // take user input if user input is valid
+	                if (j >= 0 && j < lisChoices.size())
+	                {
+	                    iSelectedChoice = j;
+	                    bKeepAsking = false;
+	                }
+	            }
+	        }
+	        catch (IOException e)
+	        {
+	            e.printStackTrace();
+	        }
+	        idata.setVariable(variable, listChoices.get(iSelectedChoice).strValue);
+	        return true;
+		}
+    
+    }
+ 
+    class Check extends Input {
+    	private final Spec spec;
+		private final Description description;
+
+		public Check(String strVariableName, Spec spec, Description description) {
+    		super(strVariableName);
+			this.spec = spec;
+			this.description = description;
+    	}
+
+		boolean process(AutomatedInstallData idata) 
+		throws IOException {
+			System.out.println(getInitialPrompt());
+			String input = inputValidValue();
+			idata.setVariable(getVariableName(), input);
+			return true;
+		}
+		
+		private String getInitialPrompt() {
+			List<Object> choices = Arrays.asList(spec.getIsTrue(), spec.getIsFalse());
+			StringBuilder result = new StringBuilder();
+			if (description != null)
+			{
+				result.append(description.getText() + "\n");
+			}
+			result.append(spec.getTxt() + "\n");
+			result.append(formatChoices(choices));
+			return result.toString();
+		}
+		
+		private String formatChoices(Object ...choices) {
+			StringBuilder result = new StringBuilder();
+			for (Object choice : choices) {
+				result.append(choice);
+			}
+			return result.toString();
+		}
+		
+		protected boolean isValid(String input) {
+			return spec.isTrue.equals(input) || spec.isFalse.equals(input);
+		}
+		
+		
+    }
+    
+    class Choice
     {
 
         public Choice(String strText, String strValue, String strSet)
@@ -1003,23 +673,59 @@ public class UserInputPanelConsoleHelper extends PanelConsoleHelper implements P
         }
 
         String strText;
-
         String strValue;
-
         String strSet;
+        
     }
     
-    public static class Password extends Input
-    {
-               
-        public Password(String strFieldType, Input[] input) {
-            super(strFieldType);
-            this.input = input;
-        }
-       
-        Input[] input;
+    class Description {
 
-        
-    }
+    	private final String text;
+		private final String id;
 
+		public String getText() {
+			return text;
+		}
+
+		public String getId() {
+			return id;
+		}
+
+		public Description(IXMLElement elem) {
+    		text = elem.getAttribute(TEXT);
+    		id = elem.getAttribute(ID);
+		}
+    }
+    
+    class Spec {
+
+    	private final Object txt;
+		private final Object id;
+		private final Object isTrue;
+		private final Object isFalse;
+		
+		public Object getTxt() {
+			return txt;
+		}
+
+		public Object getId() {
+			return id;
+		}
+
+		public Object getIsTrue() {
+			return isTrue;
+		}
+
+		public Object getIsFalse() {
+			return isFalse;
+		}
+
+		public Spec(IXMLElement spec) {
+			txt = spec.getAttribute(TEXT);
+			id = spec.getAttribute(ID);
+			isTrue = spec.getAttribute(TRUE);
+			isFalse = spec.getAttribute(FALSE);
+        	// set attribute - what for?
+		}
+    }
 }
